g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
z <- w * x
mean(z)
?lsfit
lsfit(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm((x-mean(x) ~ (y-mean(y))))
beta1 <- cor(y,x) * sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
coef(lm(y~x))
data("mtcars")
data(mtcars)
lm(mpg ~ weight, data = mtcars)
lm(mpg ~ weight)
?mtcars
lm(mpg ~ weight, data = mtcars)
View(mtcars)
lm(mpg ~ wt, data = mtcars)
beta1 <- 0.5 * 2
t2 <- 1.5 * 0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean_x <- mean(x)
xc <- (x - mean(x))
xc <- (x - mean(x))/sd(x))
xc <- (x - mean(x))/sd(x)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
swirl()
library(swirl)
swirl()
cor(gpa_nor, gch_nor)
lm(gpa_nor ~ gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col = 'red')
summary(regrline)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
swirl()
View(galton)
fit <- lm(child ~ parent, data = galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef - fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit.coef[2]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- variance(gch)
varChild <- var(gch)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild(varRes,varEst))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y,x)
model <- lm(y ~ x)
summary(model)
plot(y,x)
plot(x,y)
library(datasets)
data("mtcars")
data(mtcars)
cars <- data(mtcars)
data(mtcars)
names(mtcars)
model3 <- lm (mpg ~ weight, data = mtcars)
model3 <- lm (mpg ~ wt, data = mtcars)
summary(model3)
?mtcars
model3_1 <- lm(mpg ~ I(wt - mean(wt)), data = mtcars)
summary(model31)
summary(model3_1)
wt = 3000
coef(model3)[1] + coef(model3)[2] * wt
coef(model3)[1] + coef(model3)[2] * wt/1000
confint(model3_1)
?confint
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = 3), interval = "prediction")
model9 <- lm((mpg ~ 1, data = mtcars)
model9 <- lm(mpg ~ 1, data = mtcars)
summary(model9)
summary(model3)
summary(model3)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y ~ x))$coef
summary(model)
summary(lm(y ~ x))$sigma
model3_1 <- lm(mpg ~ I(wt - mean(wt)), data = mtcars)
summary(model3_1)
confint(model3_1)
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, newdata = data.frame(wt = 3), interval = "prediction")
fit <- lm(mpg ~ I(wt * 0.5), data = mtcars)
confint(fit)[2, ]
library(swirl)
swirl()
fit <- lm(child ~ parent, data = galton)
sqrt(fit$residuals^2/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$chuld - mu)
sTot <- sum((galton$child - mu)^2)
sqrt(deviance(fit)/(n-2))
sRes <- deviance(fit)
sRes/sTot - 1
1- sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1)
lm(galton$child ~ ones + galton$parent -1)
lm(galton$child ~ galton$parent, data = galton)
lm(child ~ 1, data = galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1,
| trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, data = trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, data = trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data = swiss)
all$coefficients - efit$coefficients
g = ggpairs(mtcars, aes_string(corSize = 6), lower = list(continuous = "smooth"),params = c(method = "loess"))
library(GGally)
library(ggplot2)
library(datasets)
data(mtcars)
g = ggpairs(mtcars, aes_string(corSize = 6), lower = list(continuous = "smooth"),params = c(method = "loess"))
g = ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"), upper = list(params=list(size=6)))
g
model3 <- lm(mpg ~ factor(am) + disp + hp + wt + factor(gear), data = mtcars)
anova(model1, model2, model3)
model2 <- lm(mpg ~ factor(am) + disp + hp + wt, data = mtcars)
model1 <- lm(mpg ~ factor(am), data = mtcars)
anova(model1, model2, model3)
plot(mtcars)
par(mfrow = c(3,3))
plot(model3)
par(mfrow = c(2,2))
plot(model3)
plot(model3, which=4)
plot(model3)
plot(model3, which=3)
plot(model3, which=2)
plot(model3, which=1)
plot(model3)
plot(model3, which=0)
plot(model3, which=5)
plot(model3)
par(mfrow = c(2,2))
plot(model3)
cor(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
View(mtcars)
par(mfrow = c(2,2))
plot(model3)
plot(model3, which = 5)
par(mfrow = c(1,1))
plot(model3, which = 5)
plot(model3, which = 4)
plot(model3, which = 3)
plot(model3, which = 2)
plot(model3, which = 1)
plot(model3, which = 6)
plot(model3, which = 4)
plot(model3, which = 5)
plot(model3, which = 7)
plot(model3, which = 5)
par(mfrow = c(2,2))
plot(model3)
library(MASS)
data("shuttle")
head(shuttle)
tail(shuttle)
xtabs(~ autolander + wind, data = shuttle)
xtabs(~ use + wind, data = shuttle)
mylogit <- glm(factor(use) ~ wind, data = shuttle, family = "binomial")
summary(mylogit)
exp(coef(mylogit))
mylogit_2 <- glm(factor(use) ~ wind + magn, data = shuttle, family = "binomial")
summary(mylogit_2)
exp(coef(mylogit_2))
mylogit_3 <- glm(factor(1 - use) ~ wind, data = shuttle, family = "binomial")
mylogit_3 <- glm((1-factor(use)) ~ wind, data = shuttle, family = "binomial")
mylogit_3 <- glm(1-(factor(use)) ~ wind, data = shuttle, family = "binomial")
mylogit_3 <- glm((1-factor(use)) ~ wind, data = shuttle, family = "binomial")
summary(mylogit)
exp(0.03)
exp(-0.03)
exp(1/0.03)
exp(1/0.03)
datat(InsectSprays)
data(InsectSprays)
head(InsectSprays)
str(InsectSprays)
mypoisson <- glm(count ~ factor(spray), family="poisson", data=InsectSprays)
summary(mypoisson)
coef(mypoission)
coef(mypoisson)
coef(mypoisson)[1]
exp(coef(mypoission)[1])/(exp(coef(mypoission)[1])+exp(coef(mypoission)[2])
)
exp(coef(mypoisson)[1])/(exp(coef(mypoisson)[1])+exp(coef(mypoisson)[2]))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
summary(model2)
model4 <- lm(mpg ~ factor(am) + hp + wt, data = mtcars)
summary(model4)
summary(model2)
model1Coef
model1$Coef
sumCoef <- summary(model3)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = model3$df) * sumCoef[1, 2]
summary(model3)
model3 <- lm(mpg ~ factor(am) + hp + wt, data = mtcars)
summary(model3)
sumCoef
sumCoef[1,2] + c(-1, 1) * qt(.975, df = model3$df) * sumCoef[1, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = model3$df) * sumCoef[1, 2]
?confint
confint(model3)
confint(model2)
confint(model1)
confint(model4)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model3)
summary(model4)
model4 <- lm(mpg ~ factor(am) + hp + wt + factor(gear), data = mtcars)
summary(model4)
summary(model2)
model5 <- lm(formula = mpg ~ factor(am) + hp, data = mtcars)
summary(model5)
model6 <- lm(formula = mpg ~ factor(am) + wt, data = mtcars)
summary(model6)
model7 <- lm(formula = mpg ~ factor(am) + disp, data = mtcars)
summary(model7)
confint(model5)
model2 <- lm(mpg ~ factor(am) + hp, data = mtcars)
summary(model2)$coef
summary(model2)$r.squared
model2 <- lm(mpg ~ factor(am) + hp, data = mtcars)
model3 <- lm(mpg ~ factor(am) + wt, data = mtcars)
model4 <- lm(mpg ~ factor(am) + disp, data = mtcars)
anova(model1, model2, model3, model4)
summary(model2)$coef
summary(model2)$r.squared
summary(model2)
model5 <- lm(mpg ~ factor(am) + hp + factor(gear), data = mtcars)
anova(model2, model5)
confint(model2)
confint(model2)[1,2]
confint(model2)[2,]
confint(model2)
summary(model3)
summary(model3)$coef
model2$coef
summary(model2)$coef
summary(model3)$coef
coef(model3)[, 4]
coef(model3)[, 2]
coef(model3)[, 1]
names(model3)
coef(model3)
coef(model3)[4,]
coef(model3)[,1]
model3[,1]
summary(model3)[,4]
model3 <- lm(mpg ~ factor(am) + hp + wt, data = mtcars)
summary(model3)
summary(model3)$coefficients
summary(model3)$coefficients[,4]
confint(model2)[2,]
summary(model1)
library(caret)
install.packages("caret")
library("caret", lib.loc="~/Library/R/3.1/library")
detach("package:caret", unload=TRUE)
library(kernlab)
install.packages("kernlab")
library("caret", lib.loc="~/Library/R/3.1/library")
library(kernlab)
data(spam)
View(spam)
p = 0.75, list = FALSE)
inTrain <- createDataPartition(y=spam$type,
p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32323)
folds <- createFolds(y=spam$type, k=10,
list = TRUE, returnTrain = TRUE)
sapply(folds, length)
folds[[1]][1:10]
set.seed(32323)
folds <- createResample(y=spam$type, k=10,
list = TRUE, returnTrain = TRUE)
folds <- createResample(y=spam$type, k=10,
list = TRUE)
folds <- createResample(y=spam$type, times=10,
list = TRUE)
folds[[1]][1:10]
tme <- 1:1000
set.seed(32323)
tme <- 1:1000
folds <- createResample(y=tme, initialWindow=20,
horizon = 10)
folds <- createTimeSlices(y=tme, initialWindow=20,
horizon = 10)
name(folds)
names(folds)
folds$train[[1]]
folds$test[1]
modelFit <- train(type ~., data = training, method = "glm")
detach("package:caret", unload=TRUE)
library("caret", lib.loc="~/Library/R/3.1/library")
modelFit <- train(type ~., data = training, method = "glm")
install.packages("e1071")
modelFit <- train(type ~., data = training, method = "glm")
args(train.default)
args(trainControl)
summary(modelFit)
modelFit
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq +  geom_smooth(method='lm',formula=y~x)
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot"))
p1
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
prop.table(t1,1)
qplot(wage,colour=education,data=training,geom="density")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
?createDataPartition
library(dplyr)
training = filter(segmentationOriginal, Case = 'Train')
testing = filter(segmentationOriginal, Case = 'Test')
?filter
training = filter(segmentationOriginal, Case == 'Train')
testing = filter(segmentationOriginal, Case == 'Test')
modFit <- train( ~ .,method="rpart",data=training)
modTree <- rpart( ~., data=training, method='cart')
modTree <- rpart( ~., data=training, method='rpart')
modFit <- train( ~ .,method="rpart",data=training)
View(segmentationOriginal)
View(segmentationOriginal)
modFit <- train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
str(olive)
data(olive)
olive = olive[,-1]
str(olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(olive)
inTrain <- createDataPartition(y=olive$Area,
p=0.7, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
dim(training); dim(testing)
modFit <- train(Area ~ .,method="rpart",data=training)
fancyRpartPlot(modFit$finalModel)
hist(olive$Area)
predict(modFit,newdata=newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?train
str(train)
str(trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomail"
data=trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomial"
data=trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method="glm",
family="binomial",
data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(modFit)
prediction <- predict(modFit,newdata=testSA)
View(testSA)
View(testSA)
missClass(prediction, testSA$chd)
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
View(vowel.train)
modFit <- train(y ~ .,
method="rf",
prox=TRUE
data=vowel.train)
modFit <- train(y ~ .,
method="rf",
prox=TRUE,
data=vowel.train)
?varImp
varImp(modFit)
setwd("~/Google Drive/Old laptop/Docs/rclass/dataproducts/final product")
library("shiny", lib.loc="~/Library/R/3.1/library")
setwd("~/Google Drive/Old laptop/Docs/rclass/dataproducts/final product/Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
